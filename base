module {
  core.module @"/Users/shinlee/tob/gzip/src/gzip-1.10/lib/basename-lgpl.c" attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!hl.int, {vast.abi_align.key = 32 : i32, vast.dl.bw = 32 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.ptr<!hl.char>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.longdouble, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.char< const >, {vast.abi_align.key = 8 : i32, vast.dl.bw = 8 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.char< const >>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.char, {vast.abi_align.key = 8 : i32, vast.dl.bw = 8 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.char>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<8176, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 65408 : i32}>, #dlti.dl_entry<!hl.array<192, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 1536 : i32}>, #dlti.dl_entry<!hl.long, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<16, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 128 : i32}>, #dlti.dl_entry<!hl.long< unsigned >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.bool, {vast.abi_align.key = 8 : i32, vast.dl.bw = 8 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.void< const >,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.void,  restrict >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<128, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 1024 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.void>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.void, {vast.abi_align.key = 8 : i32, vast.dl.bw = 0 : i32}>, #dlti.dl_entry<!hl.array<16, !hl.char< unsigned >>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 128 : i32}>, #dlti.dl_entry<!hl.short, {vast.abi_align.key = 16 : i32, vast.dl.bw = 16 : i32}>, #dlti.dl_entry<!hl.char< unsigned >, {vast.abi_align.key = 8 : i32, vast.dl.bw = 8 : i32}>, #dlti.dl_entry<!hl.int< unsigned >, {vast.abi_align.key = 32 : i32, vast.dl.bw = 32 : i32}>, #dlti.dl_entry<!hl.array<37, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 296 : i32}>, #dlti.dl_entry<!hl.short< unsigned >, {vast.abi_align.key = 16 : i32, vast.dl.bw = 16 : i32}>, #dlti.dl_entry<!hl.longlong< unsigned >, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.longlong, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<56, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 448 : i32}>, #dlti.dl_entry<!hl.void< const >, {vast.abi_align.key = 8 : i32, vast.dl.bw = 0 : i32}>, #dlti.dl_entry<!hl.array<8, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.void< const >>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>, #dlti.dl_entry<!hl.array<40, !hl.char>, {vast.abi_align.key = 8 : i32, vast.dl.bw = 320 : i32}>, #dlti.dl_entry<!hl.ptr<!hl.paren<!core.fn<(!hl.lvalue<!hl.ptr<!hl.void>>) -> (!hl.void)>>>, {vast.abi_align.key = 64 : i32, vast.dl.bw = 64 : i32}>>, vast.core.lang = #core<lang c>, vast.core.target_triple = "arm64-apple-macosx15.0.0"} {
    hl.func @strlen external (!pr.maybedata) -> !hl.long< unsigned > attributes {hl.builtin = #hl.builtin<1148>, hl.nothrow = #hl.nothrow, sym_visibility = "private"}
    hl.func @last_component external (%arg0: !pr.maybedata) -> !hl.ptr<!hl.char> attributes {hl.pure = #hl.pure} {
      pr.decl @name : !pr.maybedata
      hl.var @base  : !hl.lvalue<!hl.ptr<!hl.char< const >>> = {
        %12 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
        %13 = builtin.unrealized_conversion_cast %12 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
        %14 = pr.noparse %13 : (!pr.nodata) -> !pr.nodata
        %15 = builtin.unrealized_conversion_cast %14 : !pr.nodata to !hl.ptr<!hl.char< const >>
        %16 = pr.noparse  : () -> !pr.nodata
        %17 = builtin.unrealized_conversion_cast %16 : !pr.nodata to !hl.int
        %18 = hl.add %15, %17 : (!hl.ptr<!hl.char< const >>, !hl.int) -> !hl.ptr<!hl.char< const >>
        hl.value.yield %18 : !hl.ptr<!hl.char< const >>
      }
      hl.var @p  : !hl.lvalue<!hl.ptr<!hl.char< const >>>
      hl.var @saw_slash  : !hl.lvalue<!hl.bool> = {
        %12 = pr.noparse  : () -> !pr.nodata
        %13 = pr.noparse %12 : (!pr.nodata) -> !pr.nodata
        %14 = builtin.unrealized_conversion_cast %13 : !pr.nodata to !hl.bool
        hl.value.yield %14 : !hl.bool
      }
      hl.while {
        %12 = hl.expr : !hl.int {
          %13 = hl.expr : !hl.lvalue<!hl.char< const >> {
            %20 = hl.ref @base : !hl.lvalue<!hl.ptr<!hl.char< const >>>
            %21 = builtin.unrealized_conversion_cast %20 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
            %22 = pr.noparse %21 : (!pr.nodata) -> !pr.nodata
            %23 = builtin.unrealized_conversion_cast %22 : !pr.nodata to !hl.ptr<!hl.char< const >>
            %24 = hl.deref %23 : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
            hl.value.yield %24 : !hl.lvalue<!hl.char< const >>
          }
          %14 = builtin.unrealized_conversion_cast %13 : !hl.lvalue<!hl.char< const >> to !pr.nodata
          %15 = pr.noparse %14 : (!pr.nodata) -> !pr.nodata
          %16 = pr.noparse %15 : (!pr.nodata) -> !pr.nodata
          %17 = pr.noparse  : () -> !pr.nodata
          %18 = pr.noparse %16, %17 : (!pr.nodata, !pr.nodata) -> !pr.nodata
          %19 = builtin.unrealized_conversion_cast %18 : !pr.nodata to !hl.int
          hl.value.yield %19 : !hl.int
        }
        hl.cond.yield %12 : !hl.int
      } do {
        %12 = hl.ref @base : !hl.lvalue<!hl.ptr<!hl.char< const >>>
        %13 = hl.post.inc %12 : !hl.lvalue<!hl.ptr<!hl.char< const >>> -> !hl.ptr<!hl.char< const >>
      }
      %0 = hl.ref @p : !hl.lvalue<!hl.ptr<!hl.char< const >>>
      %1 = hl.ref @base : !hl.lvalue<!hl.ptr<!hl.char< const >>>
      %2 = builtin.unrealized_conversion_cast %1 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
      %3 = pr.noparse %2 : (!pr.nodata) -> !pr.nodata
      %4 = builtin.unrealized_conversion_cast %3 : !pr.nodata to !hl.ptr<!hl.char< const >>
      %5 = hl.assign %4 to %0 : !hl.ptr<!hl.char< const >>, !hl.lvalue<!hl.ptr<!hl.char< const >>> -> !hl.ptr<!hl.char< const >>
      hl.for {
        %12 = hl.ref @p : !hl.lvalue<!hl.ptr<!hl.char< const >>>
        %13 = builtin.unrealized_conversion_cast %12 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
        %14 = pr.noparse %13 : (!pr.nodata) -> !pr.nodata
        %15 = builtin.unrealized_conversion_cast %14 : !pr.nodata to !hl.ptr<!hl.char< const >>
        %16 = hl.deref %15 : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
        %17 = builtin.unrealized_conversion_cast %16 : !hl.lvalue<!hl.char< const >> to !pr.nodata
        %18 = pr.noparse %17 : (!pr.nodata) -> !pr.nodata
        %19 = builtin.unrealized_conversion_cast %18 : !pr.nodata to !hl.char
        hl.cond.yield %19 : !hl.char
      } incr {
        %12 = hl.ref @p : !hl.lvalue<!hl.ptr<!hl.char< const >>>
        %13 = hl.post.inc %12 : !hl.lvalue<!hl.ptr<!hl.char< const >>> -> !hl.ptr<!hl.char< const >>
      } do {
        hl.if {
          %12 = hl.expr : !hl.int {
            %13 = hl.expr : !hl.lvalue<!hl.char< const >> {
              %20 = hl.ref @p : !hl.lvalue<!hl.ptr<!hl.char< const >>>
              %21 = builtin.unrealized_conversion_cast %20 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
              %22 = pr.noparse %21 : (!pr.nodata) -> !pr.nodata
              %23 = builtin.unrealized_conversion_cast %22 : !pr.nodata to !hl.ptr<!hl.char< const >>
              %24 = hl.deref %23 : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
              hl.value.yield %24 : !hl.lvalue<!hl.char< const >>
            }
            %14 = builtin.unrealized_conversion_cast %13 : !hl.lvalue<!hl.char< const >> to !pr.nodata
            %15 = pr.noparse %14 : (!pr.nodata) -> !pr.nodata
            %16 = pr.noparse %15 : (!pr.nodata) -> !pr.nodata
            %17 = pr.noparse  : () -> !pr.nodata
            %18 = pr.noparse %16, %17 : (!pr.nodata, !pr.nodata) -> !pr.nodata
            %19 = builtin.unrealized_conversion_cast %18 : !pr.nodata to !hl.int
            hl.value.yield %19 : !hl.int
          }
          hl.cond.yield %12 : !hl.int
        } then {
          %12 = hl.ref @saw_slash : !hl.lvalue<!hl.bool>
          %13 = pr.noparse  : () -> !pr.nodata
          %14 = pr.noparse %13 : (!pr.nodata) -> !pr.nodata
          %15 = builtin.unrealized_conversion_cast %14 : !pr.nodata to !hl.bool
          %16 = hl.assign %15 to %12 : !hl.bool, !hl.lvalue<!hl.bool> -> !hl.bool
        } else {
          hl.if {
            %12 = hl.ref @saw_slash : !hl.lvalue<!hl.bool>
            %13 = builtin.unrealized_conversion_cast %12 : !hl.lvalue<!hl.bool> to !pr.nodata
            %14 = pr.noparse %13 : (!pr.nodata) -> !pr.nodata
            %15 = builtin.unrealized_conversion_cast %14 : !pr.nodata to !hl.bool
            hl.cond.yield %15 : !hl.bool
          } then {
            %12 = hl.ref @base : !hl.lvalue<!hl.ptr<!hl.char< const >>>
            %13 = hl.ref @p : !hl.lvalue<!hl.ptr<!hl.char< const >>>
            %14 = builtin.unrealized_conversion_cast %13 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
            %15 = pr.noparse %14 : (!pr.nodata) -> !pr.nodata
            %16 = builtin.unrealized_conversion_cast %15 : !pr.nodata to !hl.ptr<!hl.char< const >>
            %17 = hl.assign %16 to %12 : !hl.ptr<!hl.char< const >>, !hl.lvalue<!hl.ptr<!hl.char< const >>> -> !hl.ptr<!hl.char< const >>
            %18 = hl.ref @saw_slash : !hl.lvalue<!hl.bool>
            %19 = pr.noparse  : () -> !pr.nodata
            %20 = pr.noparse %19 : (!pr.nodata) -> !pr.nodata
            %21 = builtin.unrealized_conversion_cast %20 : !pr.nodata to !hl.bool
            %22 = hl.assign %21 to %18 : !hl.bool, !hl.lvalue<!hl.bool> -> !hl.bool
          }
        }
      }
      %6 = hl.ref @base : !hl.lvalue<!hl.ptr<!hl.char< const >>>
      %7 = builtin.unrealized_conversion_cast %6 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
      %8 = pr.noparse %7 : (!pr.nodata) -> !pr.nodata
      %9 = builtin.unrealized_conversion_cast %8 : !pr.nodata to !hl.ptr<!hl.char< const >>
      %10 = hl.cstyle_cast %9 NoOp : !hl.ptr<!hl.char< const >> -> !hl.ptr<!hl.char< const >>
      %11 = builtin.unrealized_conversion_cast %10 : !hl.ptr<!hl.char< const >> to !pr.maybedata
      hl.return %11 : !pr.maybedata
    }
    hl.func @base_len external (%arg0: !pr.maybedata) -> !hl.long< unsigned > attributes {hl.pure = #hl.pure} {
      pr.decl @name : !pr.maybedata
      hl.var @len  : !hl.lvalue<!hl.long< unsigned >>
      hl.var @prefix_len  : !hl.lvalue<!hl.long< unsigned >> = {
        %12 = pr.noparse  : () -> !pr.nodata
        %13 = pr.noparse %12 : (!pr.nodata) -> !pr.nodata
        %14 = builtin.unrealized_conversion_cast %13 : !pr.nodata to !hl.long< unsigned >
        hl.value.yield %14 : !hl.long< unsigned >
      }
      %0 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
      %1 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
      %2 = builtin.unrealized_conversion_cast %1 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
      %3 = pr.noparse %2 : (!pr.nodata) -> !pr.nodata
      %4 = builtin.unrealized_conversion_cast %3 : !pr.nodata to !hl.ptr<!hl.char< const >>
      %5 = hl.call @strlen(%4) : (!hl.ptr<!hl.char< const >>) -> !hl.long< unsigned >
      %6 = hl.assign %5 to %0 : !hl.long< unsigned >, !hl.lvalue<!hl.long< unsigned >> -> !hl.long< unsigned >
      hl.for {
        %12 = hl.bin.land {
          %13 = pr.noparse  : () -> !pr.nodata
          %14 = pr.noparse %13 : (!pr.nodata) -> !pr.nodata
          %15 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
          %16 = builtin.unrealized_conversion_cast %15 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
          %17 = pr.noparse %16 : (!pr.nodata) -> !pr.nodata
          %18 = pr.noparse %14, %17 : (!pr.nodata, !pr.nodata) -> !pr.nodata
          %19 = builtin.unrealized_conversion_cast %18 : !pr.nodata to !hl.int
          hl.value.yield %19 : !hl.int
        }, {
          %13 = hl.expr : !hl.int {
            %14 = hl.expr : !hl.lvalue<!hl.char< const >> {
              %21 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
              %22 = builtin.unrealized_conversion_cast %21 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
              %23 = pr.noparse %22 : (!pr.nodata) -> !pr.nodata
              %24 = builtin.unrealized_conversion_cast %23 : !pr.nodata to !hl.ptr<!hl.char< const >>
              %25 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
              %26 = builtin.unrealized_conversion_cast %25 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
              %27 = pr.noparse %26 : (!pr.nodata) -> !pr.nodata
              %28 = builtin.unrealized_conversion_cast %27 : !pr.nodata to !hl.long< unsigned >
              %29 = pr.noparse  : () -> !pr.nodata
              %30 = pr.noparse %29 : (!pr.nodata) -> !pr.nodata
              %31 = builtin.unrealized_conversion_cast %30 : !pr.nodata to !hl.long< unsigned >
              %32 = hl.sub %28, %31 : (!hl.long< unsigned >, !hl.long< unsigned >) -> !hl.long< unsigned >
              %33 = hl.subscript %24 at [%32 : !hl.long< unsigned >] : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
              hl.value.yield %33 : !hl.lvalue<!hl.char< const >>
            }
            %15 = builtin.unrealized_conversion_cast %14 : !hl.lvalue<!hl.char< const >> to !pr.nodata
            %16 = pr.noparse %15 : (!pr.nodata) -> !pr.nodata
            %17 = pr.noparse %16 : (!pr.nodata) -> !pr.nodata
            %18 = pr.noparse  : () -> !pr.nodata
            %19 = pr.noparse %17, %18 : (!pr.nodata, !pr.nodata) -> !pr.nodata
            %20 = builtin.unrealized_conversion_cast %19 : !pr.nodata to !hl.int
            hl.value.yield %20 : !hl.int
          }
          hl.value.yield %13 : !hl.int
        } : !hl.int
        hl.cond.yield %12 : !hl.int
      } incr {
        %12 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
        %13 = hl.post.dec %12 : !hl.lvalue<!hl.long< unsigned >> -> !hl.long< unsigned >
      } do {
        hl.continue
      }
      hl.if {
        %12 = hl.bin.land {
          %13 = hl.bin.land {
            %14 = hl.bin.land {
              %15 = hl.bin.land {
                %16 = pr.noparse  : () -> !pr.nodata
                %17 = builtin.unrealized_conversion_cast %16 : !pr.nodata to !hl.int
                hl.value.yield %17 : !hl.int
              }, {
                %16 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
                %17 = builtin.unrealized_conversion_cast %16 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
                %18 = pr.noparse %17 : (!pr.nodata) -> !pr.nodata
                %19 = pr.noparse  : () -> !pr.nodata
                %20 = pr.noparse %19 : (!pr.nodata) -> !pr.nodata
                %21 = pr.noparse %18, %20 : (!pr.nodata, !pr.nodata) -> !pr.nodata
                %22 = builtin.unrealized_conversion_cast %21 : !pr.nodata to !hl.int
                hl.value.yield %22 : !hl.int
              } : !hl.int
              hl.value.yield %15 : !hl.int
            }, {
              %15 = hl.expr : !hl.int {
                %16 = hl.expr : !hl.lvalue<!hl.char< const >> {
                  %23 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
                  %24 = builtin.unrealized_conversion_cast %23 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
                  %25 = pr.noparse %24 : (!pr.nodata) -> !pr.nodata
                  %26 = builtin.unrealized_conversion_cast %25 : !pr.nodata to !hl.ptr<!hl.char< const >>
                  %27 = pr.noparse  : () -> !pr.nodata
                  %28 = builtin.unrealized_conversion_cast %27 : !pr.nodata to !hl.int
                  %29 = hl.subscript %26 at [%28 : !hl.int] : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
                  hl.value.yield %29 : !hl.lvalue<!hl.char< const >>
                }
                %17 = builtin.unrealized_conversion_cast %16 : !hl.lvalue<!hl.char< const >> to !pr.nodata
                %18 = pr.noparse %17 : (!pr.nodata) -> !pr.nodata
                %19 = pr.noparse %18 : (!pr.nodata) -> !pr.nodata
                %20 = pr.noparse  : () -> !pr.nodata
                %21 = pr.noparse %19, %20 : (!pr.nodata, !pr.nodata) -> !pr.nodata
                %22 = builtin.unrealized_conversion_cast %21 : !pr.nodata to !hl.int
                hl.value.yield %22 : !hl.int
              }
              hl.value.yield %15 : !hl.int
            } : !hl.int
            hl.value.yield %14 : !hl.int
          }, {
            %14 = hl.expr : !hl.int {
              %15 = hl.expr : !hl.lvalue<!hl.char< const >> {
                %22 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
                %23 = builtin.unrealized_conversion_cast %22 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
                %24 = pr.noparse %23 : (!pr.nodata) -> !pr.nodata
                %25 = builtin.unrealized_conversion_cast %24 : !pr.nodata to !hl.ptr<!hl.char< const >>
                %26 = pr.noparse  : () -> !pr.nodata
                %27 = builtin.unrealized_conversion_cast %26 : !pr.nodata to !hl.int
                %28 = hl.subscript %25 at [%27 : !hl.int] : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
                hl.value.yield %28 : !hl.lvalue<!hl.char< const >>
              }
              %16 = builtin.unrealized_conversion_cast %15 : !hl.lvalue<!hl.char< const >> to !pr.nodata
              %17 = pr.noparse %16 : (!pr.nodata) -> !pr.nodata
              %18 = pr.noparse %17 : (!pr.nodata) -> !pr.nodata
              %19 = pr.noparse  : () -> !pr.nodata
              %20 = pr.noparse %18, %19 : (!pr.nodata, !pr.nodata) -> !pr.nodata
              %21 = builtin.unrealized_conversion_cast %20 : !pr.nodata to !hl.int
              hl.value.yield %21 : !hl.int
            }
            hl.value.yield %14 : !hl.int
          } : !hl.int
          hl.value.yield %13 : !hl.int
        }, {
          %13 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
          %14 = builtin.unrealized_conversion_cast %13 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
          %15 = pr.noparse %14 : (!pr.nodata) -> !pr.nodata
          %16 = builtin.unrealized_conversion_cast %15 : !pr.nodata to !hl.ptr<!hl.char< const >>
          %17 = pr.noparse  : () -> !pr.nodata
          %18 = builtin.unrealized_conversion_cast %17 : !pr.nodata to !hl.int
          %19 = hl.subscript %16 at [%18 : !hl.int] : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
          %20 = builtin.unrealized_conversion_cast %19 : !hl.lvalue<!hl.char< const >> to !pr.nodata
          %21 = pr.noparse %20 : (!pr.nodata) -> !pr.nodata
          %22 = builtin.unrealized_conversion_cast %21 : !pr.nodata to !hl.char
          %23 = hl.lnot %22 : !hl.char -> !hl.int
          hl.value.yield %23 : !hl.int
        } : !hl.int
        hl.cond.yield %12 : !hl.int
      } then {
        %12 = pr.noparse  : () -> !pr.nodata
        %13 = pr.noparse %12 : (!pr.nodata) -> !pr.nodata
        %14 = builtin.unrealized_conversion_cast %13 : !pr.nodata to !hl.long< unsigned >
        %15 = builtin.unrealized_conversion_cast %14 : !hl.long< unsigned > to !pr.maybedata
        hl.return %15 : !pr.maybedata
      }
      hl.if {
        %12 = hl.bin.land {
          %13 = hl.bin.land {
            %14 = hl.bin.land {
              %15 = pr.noparse  : () -> !pr.nodata
              %16 = builtin.unrealized_conversion_cast %15 : !pr.nodata to !hl.int
              hl.value.yield %16 : !hl.int
            }, {
              %15 = hl.ref @prefix_len : !hl.lvalue<!hl.long< unsigned >>
              %16 = builtin.unrealized_conversion_cast %15 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
              %17 = pr.noparse %16 : (!pr.nodata) -> !pr.nodata
              %18 = builtin.unrealized_conversion_cast %17 : !pr.nodata to !hl.long< unsigned >
              hl.value.yield %18 : !hl.long< unsigned >
            } : !hl.int
            hl.value.yield %14 : !hl.int
          }, {
            %14 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
            %15 = builtin.unrealized_conversion_cast %14 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
            %16 = pr.noparse %15 : (!pr.nodata) -> !pr.nodata
            %17 = hl.ref @prefix_len : !hl.lvalue<!hl.long< unsigned >>
            %18 = builtin.unrealized_conversion_cast %17 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
            %19 = pr.noparse %18 : (!pr.nodata) -> !pr.nodata
            %20 = pr.noparse %16, %19 : (!pr.nodata, !pr.nodata) -> !pr.nodata
            %21 = builtin.unrealized_conversion_cast %20 : !pr.nodata to !hl.int
            hl.value.yield %21 : !hl.int
          } : !hl.int
          hl.value.yield %13 : !hl.int
        }, {
          %13 = hl.expr : !hl.int {
            %14 = hl.expr : !hl.lvalue<!hl.char< const >> {
              %21 = hl.ref @name : !hl.lvalue<!hl.ptr<!hl.char< const >>>
              %22 = builtin.unrealized_conversion_cast %21 : !hl.lvalue<!hl.ptr<!hl.char< const >>> to !pr.nodata
              %23 = pr.noparse %22 : (!pr.nodata) -> !pr.nodata
              %24 = builtin.unrealized_conversion_cast %23 : !pr.nodata to !hl.ptr<!hl.char< const >>
              %25 = hl.ref @prefix_len : !hl.lvalue<!hl.long< unsigned >>
              %26 = builtin.unrealized_conversion_cast %25 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
              %27 = pr.noparse %26 : (!pr.nodata) -> !pr.nodata
              %28 = builtin.unrealized_conversion_cast %27 : !pr.nodata to !hl.long< unsigned >
              %29 = hl.subscript %24 at [%28 : !hl.long< unsigned >] : !hl.ptr<!hl.char< const >> -> !hl.lvalue<!hl.char< const >>
              hl.value.yield %29 : !hl.lvalue<!hl.char< const >>
            }
            %15 = builtin.unrealized_conversion_cast %14 : !hl.lvalue<!hl.char< const >> to !pr.nodata
            %16 = pr.noparse %15 : (!pr.nodata) -> !pr.nodata
            %17 = pr.noparse %16 : (!pr.nodata) -> !pr.nodata
            %18 = pr.noparse  : () -> !pr.nodata
            %19 = pr.noparse %17, %18 : (!pr.nodata, !pr.nodata) -> !pr.nodata
            %20 = builtin.unrealized_conversion_cast %19 : !pr.nodata to !hl.int
            hl.value.yield %20 : !hl.int
          }
          hl.value.yield %13 : !hl.int
        } : !hl.int
        hl.cond.yield %12 : !hl.int
      } then {
        %12 = hl.ref @prefix_len : !hl.lvalue<!hl.long< unsigned >>
        %13 = builtin.unrealized_conversion_cast %12 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
        %14 = pr.noparse %13 : (!pr.nodata) -> !pr.nodata
        %15 = builtin.unrealized_conversion_cast %14 : !pr.nodata to !hl.long< unsigned >
        %16 = pr.noparse  : () -> !pr.nodata
        %17 = pr.noparse %16 : (!pr.nodata) -> !pr.nodata
        %18 = builtin.unrealized_conversion_cast %17 : !pr.nodata to !hl.long< unsigned >
        %19 = hl.add %15, %18 : (!hl.long< unsigned >, !hl.long< unsigned >) -> !hl.long< unsigned >
        %20 = builtin.unrealized_conversion_cast %19 : !hl.long< unsigned > to !pr.maybedata
        hl.return %20 : !pr.maybedata
      }
      %7 = hl.ref @len : !hl.lvalue<!hl.long< unsigned >>
      %8 = builtin.unrealized_conversion_cast %7 : !hl.lvalue<!hl.long< unsigned >> to !pr.nodata
      %9 = pr.noparse %8 : (!pr.nodata) -> !pr.nodata
      %10 = builtin.unrealized_conversion_cast %9 : !pr.nodata to !hl.long< unsigned >
      %11 = builtin.unrealized_conversion_cast %10 : !hl.long< unsigned > to !pr.maybedata
      hl.return %11 : !pr.maybedata
    }
  }
}

